# dev version. don't forget to check the .env file (for build-time envars) and .env.dev (for runtime envars).

services:
  django:
    # since both build: & image: are present, the result of the build: instruction will be called whatever name we assign to image:
    image: "${DJANGO_IMG_NAME}"
    build:
      # everything relevent to that built is within /app
      context: ./app
      # redundant as it is the default but just for clarity
      dockerfile: Dockerfile
      args:
        - "VERSION=${DJANGO_IMG_VERSION}"
      # using gunicorn as our webserver in front of Docker (manage traffic)
    command: "python manage.py runserver ${DJANGO_IP}:${DJANGO_PORT}"
    # expose only makes the port available on the Docker virtual network. Dfeault for django is 8000 so we'll just use that
    ports:
      - "${DJANGO_PORT}:${DJANGO_PORT}"
    # we'll dump the (runtime) envars in there.  to user buildtime envars, see this issue: https://stackoverflow.com/questions/64405332/docker-compose-env-file-only-loading-env-but-not-a-specific-name/64436008#64436008
    # short story being that you MUST name a file .env if you are to use those as build-time envars
    env_file:
      - ./.env.dev
    volumes:
      - ./app:/usr/src/app/
    networks:
      - backend
    depends_on:
      - db
  db:
    image: "${POSTGRES_VERSION}"
    volumes:
      - "db_data:${DATA_DIR}"
    networks:
      - backend
    environment:
      - POSTGRES_USER=pguser
      - POSTGRES_PASSWORD=pgpass
      - POSTGRES_DB=template_db
volumes:
  db_data:

networks:
  backend:
